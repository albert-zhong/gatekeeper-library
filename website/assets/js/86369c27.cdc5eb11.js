"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3828],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>b});var t=a(7294);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=t.createContext({}),r=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},d=function(e){var n=r(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=r(a),c=l,b=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return a?t.createElement(b,p(p({ref:n},d),{},{components:a})):t.createElement(b,p({ref:n},d))}));function b(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,p=new Array(i);p[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:l,p[1]=o;for(var r=2;r<i;r++)p[r]=a[r];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1878:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>r});var t=a(7462),l=(a(7294),a(3905));const i={id:"poddisruptionbudget",title:"Pod Disruption Budget"},p="Pod Disruption Budget",o={unversionedId:"validation/poddisruptionbudget",id:"validation/poddisruptionbudget",title:"Pod Disruption Budget",description:"Description",source:"@site/docs/validation/poddisruptionbudget.md",sourceDirName:"validation",slug:"/validation/poddisruptionbudget",permalink:"/gatekeeper-library/website/validation/poddisruptionbudget",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper-library/edit/master/website/docs/validation/poddisruptionbudget.md",tags:[],version:"current",frontMatter:{id:"poddisruptionbudget",title:"Pod Disruption Budget"},sidebar:"docs",previous:{title:"Block updating Service Account",permalink:"/gatekeeper-library/website/validation/noupdateserviceaccount"},next:{title:"Replica Limits",permalink:"/gatekeeper-library/website/validation/replicalimits"}},s={},r=[{value:"Description",id:"description",level:2},{value:"Template",id:"template",level:2},{value:"Usage",id:"usage",level:3},{value:"Examples",id:"examples",level:2}],d={toc:r},u="wrapper";function m(e){let{components:n,...a}=e;return(0,l.kt)(u,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"pod-disruption-budget"},"Pod Disruption Budget"),(0,l.kt)("h2",{id:"description"},"Description"),(0,l.kt)("p",null,"Disallow the following scenarios when deploying PodDisruptionBudgets or resources that implement the replica subresource (e.g. Deployment, ReplicationController, ReplicaSet, StatefulSet): 1. Deployment of PodDisruptionBudgets with .spec.maxUnavailable == 0 2. Deployment of PodDisruptionBudgets with .spec.minAvailable == .spec.replicas of the resource with replica subresource This will prevent PodDisruptionBudgets from blocking voluntary disruptions such as node draining.\n",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/pods/disruptions/"},"https://kubernetes.io/docs/concepts/workloads/pods/disruptions/")),(0,l.kt)("h2",{id:"template"},"Template"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8spoddisruptionbudget\n  annotations:\n    metadata.gatekeeper.sh/title: "Pod Disruption Budget"\n    metadata.gatekeeper.sh/version: 1.0.3\n    metadata.gatekeeper.sh/requires-sync-data: |\n      "[\n        [\n          {\n            "groups":["policy"],\n            "versions": ["v1"],\n            "kinds": ["PodDisruptionBudget"]\n          }\n        ]\n      ]"\n    description: >-\n      Disallow the following scenarios when deploying PodDisruptionBudgets or resources that implement the replica subresource (e.g. Deployment, ReplicationController, ReplicaSet, StatefulSet):\n      1. Deployment of PodDisruptionBudgets with .spec.maxUnavailable == 0\n      2. Deployment of PodDisruptionBudgets with .spec.minAvailable == .spec.replicas of the resource with replica subresource\n      This will prevent PodDisruptionBudgets from blocking voluntary disruptions such as node draining.\n\n      https://kubernetes.io/docs/concepts/workloads/pods/disruptions/\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sPodDisruptionBudget\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8spoddisruptionbudget\n\n        violation[{"msg": msg}] {\n          input.review.kind.kind == "PodDisruptionBudget"\n          pdb := input.review.object\n\n          not valid_pdb_max_unavailable(pdb)\n          msg := sprintf(\n            "PodDisruptionBudget <%v> has maxUnavailable of 0, only positive integers are allowed for maxUnavailable",\n            [pdb.metadata.name],\n          )\n        }\n\n        violation[{"msg": msg}] {\n          obj := input.review.object\n          pdb := data.inventory.namespace[obj.metadata.namespace]["policy/v1"].PodDisruptionBudget[_]\n\n          matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label] }\n          labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label] }\n          count(matchLabels - labels) == 0\n\n          not valid_pdb_max_unavailable(pdb)\n          msg := sprintf(\n            "%v <%v> has been selected by PodDisruptionBudget <%v> but has maxUnavailable of 0, only positive integers are allowed for maxUnavailable",\n            [obj.kind, obj.metadata.name, pdb.metadata.name],\n          )\n        }\n\n        violation[{"msg": msg}] {\n          obj := input.review.object\n          pdb := data.inventory.namespace[obj.metadata.namespace]["policy/v1"].PodDisruptionBudget[_]\n          \n          matchLabels := { [label, value] | some label; value := pdb.spec.selector.matchLabels[label] }\n          labels := { [label, value] | some label; value := obj.spec.selector.matchLabels[label] }\n          count(matchLabels - labels) == 0\n\n          not valid_pdb_min_available(obj, pdb)\n          msg := sprintf(\n            "%v <%v> has %v replica(s) but PodDisruptionBudget <%v> has minAvailable of %v, PodDisruptionBudget count should always be lower than replica(s), and not used when replica(s) is set to 1",\n            [obj.kind, obj.metadata.name, obj.spec.replicas, pdb.metadata.name, pdb.spec.minAvailable],\n          )\n        }\n\n        valid_pdb_min_available(obj, pdb) {\n          # default to -1 if minAvailable is not set so valid_pdb_min_available is always true\n          # for objects with >= 0 replicas. If minAvailable defaults to >= 0, objects with\n          # replicas field might violate this constraint if they are equal to the default set here\n          min_available := object.get(pdb.spec, "minAvailable", -1)\n          obj.spec.replicas > min_available\n        }\n\n        valid_pdb_max_unavailable(pdb) {\n          # default to 1 if maxUnavailable is not set so valid_pdb_max_unavailable always returns true.\n          # If maxUnavailable defaults to 0, it violates this constraint because all pods needs to be\n          # available and no pods can be evicted voluntarily\n          max_unavailable := object.get(pdb.spec, "maxUnavailable", 1)\n          max_unavailable > 0\n        }\n\n')),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/template.yaml\n")),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"pod-disruption-budget"),(0,l.kt)("blockquote",null,(0,l.kt)("details",null,(0,l.kt)("summary",null,"constraint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sPodDisruptionBudget\nmetadata:\n  name: pod-distruption-budget\nspec:\n  match:\n    kinds:\n      - apiGroups: ["apps"]\n        kinds: ["Deployment", "ReplicaSet", "StatefulSet"]\n      - apiGroups: ["policy"]\n        kinds: ["PodDisruptionBudget"]\n      - apiGroups: [""]\n        kinds: ["ReplicationController"]\n\n')),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/constraint.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed-pdb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: nginx-pdb-allowed\n  namespace: default\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n      foo: bar\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_allowed_pdb.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-disallowed-pdb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: nginx-pdb-disallowed\n  namespace: default\nspec:\n  maxUnavailable: 0\n  selector:\n    matchLabels:\n      foo: bar\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_disallowed_pdb.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed-min-available"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-allowed-1\n  namespace: default\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n      example: allowed-deployment-1\n  template:\n    metadata:\n      labels:\n        app: nginx\n        example: allowed-deployment-1\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_allowed_deployment1.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed-max-unavailable"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-allowed-2\n  namespace: default\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n      example: allowed-deployment-2\n  template:\n    metadata:\n      labels:\n        app: nginx\n        example: allowed-deployment-2\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_allowed_deployment2.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed-subset-selector"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-allowed-3\n  namespace: default\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n      example: allowed-deployment-3\n  template:\n    metadata:\n      labels:\n        app: nginx\n        example: allowed-deployment-3\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_allowed_deployment3.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-allowed-nomatch-selector"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-allowed-4\n  namespace: default\n  labels:\n    app: non-matching-nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: non-matching-nginx\n      example: allowed-deployment-4\n  template:\n    metadata:\n      labels:\n        app: non-matching-nginx\n        example: allowed-deployment-4\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_allowed_deployment4.yaml\n"))),(0,l.kt)("details",null,(0,l.kt)("summary",null,"example-disallowed-min-available"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment-disallowed\n  namespace: default\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n      example: disallowed-deployment\n  template:\n    metadata:\n      labels:\n        app: nginx\n        example: disallowed-deployment\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n\n")),(0,l.kt)("p",null,"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper-library/master/library/general/poddisruptionbudget/samples/poddisruptionbudget/example_disallowed_deployment.yaml\n"))))))}m.isMDXComponent=!0}}]);